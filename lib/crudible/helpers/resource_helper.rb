require 'crudible/helpers/resource_menu'
require 'crudible/helpers/move_menu'

module Crudible
  module Helpers
    module ResourceHelper
      # Creates edit/destroy links for the given resource.
      #
      # The options hash currently only has one important key: `path`, which
      # can be used to add a namespace to the resource's path. For example, if
      # your route is in the `:admin` namespace, you could do this:
      #
      #     resource_menu(user, path: [:admin])
      #
      # Note that if no path is supplied, the resource_base_path as defined in
      # the controller is used.
      def resource_menu(resource, options = {})
        Crudible::Helpers::ResourceMenu
          .new(resource, options: options, template: self)
          .render
      end

      # Creates move higher/lower/top/bottom links for the given resource to use
      # with the acts_as_list gem.
      #
      # The options hash currently only has one important key: `path`, which can
      # be used to add a namespace to the resource's path. For example, if your
      # route is in the `:admin` namespace, you could do this:
      #
      # Note that if no path is supplied, the resource_base_path as defined in
      # the controller is used.
      #
      #     resource_menu(user, path: [:admin])
      def move_menu(resource, options = {})
        Crudible::Helpers::MoveMenu
          .new(resource, options: options, template: self)
          .render
      end

      # Returns a link to add a new resource. If no resource is given, uses
      # the current controller's resource_name as a resource. e.g.
      #
      #     new_resource_link :blog
      #
      #  is equivalent to
      #
      #     new_resource_link
      #
      #  assuming the current controller is the BlogsController
      def new_resource_link(resource = nil, options = {})
        link_to(
          new_resource_label,
          [
            :new,
            resource_base_path,
            (resource || resource_name).to_sym
          ].flatten,
          options.deep_merge(class: new_resource_class)
        )
      end

      # This returns the text used for the new_resource_link helper.
      # ResourceMenu helper. This can be overridden in your own helpers
      # for a custom text label.
      def new_resource_label
        t('crudible.links.new')
      end

      # This the class applied to the new_resource_link helper. This can be
      # overridden in your own helpers for a custom class.
      def new_resource_class
        'new'
      end

      # This returns the text used for the "edit" link generated by the
      # ResourceMenu helper. This can be overridden in your own helpers
      # for a custom text label.
      def edit_resource_label
        t('crudible.links.edit')
      end

      # This the class applied to the "edit" link generated by the
      # ResourceMenu helper. This can be overridden in your own helpers
      # for a custom class.
      def edit_resource_class
        'edit'
      end

      # This returns the text used for the "delete" link generated by the
      # ResourceMenu helper. This can be overridden in your own helpers
      # for a custom text label.
      def destroy_resource_label
        t('crudible.links.destroy')
      end

      # This the class applied to the "delete" link generated by the
      # ResourceMenu helper. This can be overridden in your own helpers
      # for a custom class.
      def destroy_resource_class
        'destroy'
      end

      # This returns the text used for the "move" links generated by the
      # MoveMenu helper. This can be overridden in your own helpers
      # for a custom text label.
      def move_resource_label(direction)
        t("crudible.links.#{direction}")
      end

      # This the class applied to the "move" links generated by the
      # MoveMenu helper. This can be overridden in your own helpers
      # for a custom class.
      def move_resource_class(direction)
        "move move__#{direction}"
      end

      # Returns the humanized name of the current resource (e.g. News Item)
      def human_resource_name
        @human_resource_name ||= resource_class.model_name.human
      end

      # Returns the plural humanized name of the current resources
      # (e.g. News Items)
      def human_resources_name
        @human_resources_name ||= resource_class.model_name.human(count: 2)
      end

      # Returns the humanized attribute name for the current resource
      def attribute_name(attribute)
        resource_class.human_attribute_name(attribute)
      end
    end
  end
end

ActionView::Base.send(:include, Crudible::Helpers::ResourceHelper)
